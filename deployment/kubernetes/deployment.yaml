apiVersion: apps/v1
kind: Deployment
metadata:
  name: luxe-api
  namespace: luxe-staycations
  labels:
    app: luxe-api
    version: v1.0.0
spec:
  replicas: 3
  selector:
    matchLabels:
      app: luxe-api
  template:
    metadata:
      labels:
        app: luxe-api
        version: v1.0.0
    spec:
      containers:
      - name: luxe-api
        image: luxe-api:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 3001
          name: http
        env:
        - name: NODE_ENV
          value: "production"
        - name: PORT
          value: "3001"
        - name: SUPABASE_URL
          valueFrom:
            secretKeyRef:
              name: luxe-secrets
              key: supabase-url
        - name: SUPABASE_SERVICE_ROLE_KEY
          valueFrom:
            secretKeyRef:
              name: luxe-secrets
              key: supabase-service-key
        - name: FRONTEND_URL
          value: "https://luxestaycations.com"
        - name: STRIPE_SECRET_KEY
          valueFrom:
            secretKeyRef:
              name: luxe-secrets
              key: stripe-secret-key
        - name: STRIPE_WEBHOOK_SECRET
          valueFrom:
            secretKeyRef:
              name: luxe-secrets
              key: stripe-webhook-secret
        - name: REDIS_URL
          value: "redis://luxe-redis:6379"
        - name: JWT_SECRET
          valueFrom:
            secretKeyRef:
              name: luxe-secrets
              key: jwt-secret
        resources:
          requests:
            memory: "256Mi"
            cpu: "250m"
          limits:
            memory: "512Mi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /health
            port: 3001
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        volumeMounts:
        - name: logs
          mountPath: /app/logs
        - name: uploads
          mountPath: /app/uploads
      volumes:
      - name: logs
        persistentVolumeClaim:
          claimName: luxe-logs-pvc
      - name: uploads
        persistentVolumeClaim:
          claimName: luxe-uploads-pvc
      imagePullSecrets:
      - name: luxe-registry-secret
---
apiVersion: v1
kind: Service
metadata:
  name: luxe-api-service
  namespace: luxe-staycations
spec:
  selector:
    app: luxe-api
  ports:
  - protocol: TCP
    port: 80
    targetPort: 3001
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: luxe-api-ingress
  namespace: luxe-staycations
  annotations:
    kubernetes.io/ingress.class: "nginx"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/force-ssl-redirect: "true"
    nginx.ingress.kubernetes.io/rate-limit: "100"
    nginx.ingress.kubernetes.io/rate-limit-window: "1m"
spec:
  tls:
  - hosts:
    - api.luxestaycations.com
    secretName: luxe-api-tls
  rules:
  - host: api.luxestaycations.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: luxe-api-service
            port:
              number: 80
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: luxe-logs-pvc
  namespace: luxe-staycations
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: standard
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: luxe-uploads-pvc
  namespace: luxe-staycations
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 20Gi
  storageClassName: standard
